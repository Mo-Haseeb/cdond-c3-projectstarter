version: 2.1


orbs: 
    slack: circleci/slack@4.10.1
    
    
commands:
    notify_on_failure:
        steps:
          - slack/notify:
              event: fail
              channel: cicd-pipeline
              template: basic_fail_1


    install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
       

    install_ansible:
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              python3 -m pip install --user ansible              


    destroy-environment:

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}
      - run: 
          name: Frontend build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run: 
          name: Backend Build
          command: |
            cd backend
            npm install
            npm run build
      - run:
          command: |
            pwd
            ls -larth 
      - save_cache:
          paths: [backend/node_modules]
          key: backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}



  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run:    
          name: Backend Test
          command: |
            cd backend
            npm install
            npm run test    

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}
      - run:    
          name: Frontend Test
          command: |
            cd frontend
            npm install
            npm run test


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run:    
          name: Backend Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical       
      - notify_on_failure
 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}
      - run:    
          name: Frontend Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installation tar and gzip
          command: | 
            yum install tar -y
            yum install unzip -y
      - run:
          name: Backend Infrastructure Installation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Frontend Infrastructure Installation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Add EC2 Instance IP to the inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
    

workflows:
  default:
    jobs:
      #- build-backend
      #- build-frontend
      #- test-backend:
          #requires:
            #- build-backend
      #- test-frontend:
          #requires:
            #- build-frontend
      #- scan-backend:
          #requires:
            #- build-backend
      #- scan-frontend:
          #requires:
            #- build-frontend
      - deploy-infrastructure
