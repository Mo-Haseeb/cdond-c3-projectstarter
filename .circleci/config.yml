version: 2.1
##

orbs: 
    slack: circleci/slack@4.10.1
    
    
commands:
    notify_on_failure:
        steps:
          - slack/notify:
              event: fail
              channel: cicd-pipeline
              template: basic_fail_1


    install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
       

    install_ansible:
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              python3 -m pip install --user ansible
              
              
    install_nodejs:
      description: Install Node.js 13.8.0
      steps:
        - run:
            name: Install Node.js 13.8.0
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs
  
              # Use n version manager to use Node.js v13.8.0
              sudo npm install --global n
              sudo n 13.8.0


    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              # Empty frontend bucket
              aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
    
              # Delete frontend stack
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
    
              # Delete backend stack
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>


    revert-migrations:
      description: Revert the last migration, if any were executed during the current workflow
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}
      - run: 
          name: Frontend build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run: 
          name: Backend Build
          command: |
            cd backend
            npm install
            npm run build
      - run:
          command: |
            pwd
            ls -larth 
      - save_cache:
          paths: [backend/node_modules]
          key: backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}



  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run:    
          name: Backend Test
          command: |
            cd backend
            npm install
            npm run test    

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}
      - run:    
          name: Frontend Test
          command: |
            cd frontend
            npm install
            npm run test


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run:    
          name: Backend Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical       
      - notify_on_failure
 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }}
      - run:    
          name: Frontend Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Backend Infrastructure Installation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Frontend Infrastructure Installation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Add EC2 Instance IP to the inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["04:47:91:df:93:42:69:4e:d0:e2:b8:b5:9c:73:ae:7e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server using ansible playbook 
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment      

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
      - run:
          name: Migration Result
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: send migration result to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations


  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - restore_cache:
          keys: 
            - backendUdaPeople_Product-{{ checksum "frontend/package-lock.json" }} 
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install  
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
      
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations


  deploy-backend:
        docker:
          - image: cimg/python:3.10
        steps:
          - checkout
          - install_awscli
          - install_ansible
          - install_nodejs
          - add_ssh_keys:
              fingerprints: ["04:47:91:df:93:42:69:4e:d0:e2:b8:b5:9c:73:ae:7e"]
          - attach_workspace:
              at: ~/
          - restore_cache:  
              keys:
                 - backend-deps-{{ checksum "backend/package-lock.json" }}          
          - run:
              name: Install dependencies
              command: |
                 cd backend
                 npm install 
          - run:
              name: Deploy backend
              command: |
                  # Generate production build of the backend
                  cd backend
                  npm run build
                  # Archive the contents of the dist folder, along with backend package information
                  cd ..
                  tar -czf artifact.tar.gz dist/* package*
                  # Copy the files to the deploy role files folder to prepare for deploying it via ansible
                  cd .circleci
                  cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
          - run:
              name: Deploy backend
              command: |
                export TYPEORM_MIGRATIONS_DIR=./migrations
                export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
                export TYPEORM_MIGRATIONS=./migrations/*.ts
                cd .circleci/ansible
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml
          - destroy-environment
          - revert-migrations    

  # deploy-backend:
  #   docker:
  #     - image: cimg/python:3.10
  #   steps:
  #      - checkout
  #      - install_nodejs
  #      - install_awscli
  #      - restore_cache:
  #          keys: 
  #            - backendUdaPeople_Product-{{ checksum "backend/package-lock.json" }}
  #      - add_ssh_keys:
  #          fingerprints: ["04:47:91:df:93:42:69:4e:d0:e2:b8:b5:9c:73:ae:7e"]
  #      - attach_workspace:
  #          at: ~/
  #      - run:
  #          -  name: install dependencies
  #             command: |
  #               cd backend
  #               npm install
  #      - run: 
  #           - name: Deploy backend
  #             command: |
  #                 cd backend
  #                 npm run build
  #                 cd backend
  #                 tar -czf artifact.tar.gz dist/* package*
  #                 cd .circleci
  #                 cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
  #      - run:
  #           - name: Deploy backenddd
  #             command: |
  #               export TYPEORM_MIGRATIONS_DIR=./migrations
  #               export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
  #               export TYPEORM_MIGRATIONS=./migrations/*.ts
  #               cd .circleci/ansible
  #               cat inventory.txt
  #               ansible-playbook -i inventory.txt deploy-backend.yml

workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure
      - configure-infrastructure:
          requires:
              - deploy-infrastructure
      - run-migrations:
            requires:
              - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
